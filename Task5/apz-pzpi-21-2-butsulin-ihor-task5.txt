1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ СИСТЕМИ


Перед розробкою мобільного програмного застосунку необхідно провести концептуальне моделювання програмного продукту. 
Керівник складу може створювати та видаляти завдання для працівників з переміщення посилок, вносити інформацію про прибуття та вибуття машин, отримувати інформацію про поточний стан завдань, машин та складу, додати робочий час працівників.
Працівник може отримати дані про завдання, які він має виконати, та відмітити їх статус (виконано чи не виконано).
У відповідності до вищезазначеного, була розроблена UML діаграма прецедентів (рис. 1.1).


2 ОПИС РОЗРОБКИ МОБІЛЬНОГО ЗАСТОСУНКУ
2.1 Обґрунтування архітектурних рішень проекту


Під час розробки було визначено, що архітектурною основою клієнтського застосунку стане змішана архітектура на основі компонентно-орієнтованої архітектури з використанням патерну Model-View-ViewModel. Таке рішення дозволило значно покращити продуктивність продукту та розробку проекту. 
Кожна незалежна частина системи написана у вигляді компонента – напівзалежних частин, двобічна комунікація яких обмежена. Логіка взаємодії з серверною частиною застосунку винесена окремо від інтерфейсу застосунку, у моделі представлення. Це дозволяє розділити програму на логічні частини і підвищує якість коду.
Налаштування та конфігурація будуть зберігатися у окремому файлі та підвантажуватися в момент збірки застосунку.
Обмін даних між серверною та мобільною частиною програми виконується за принципом REST API, тобто мобільний застосунок виконує асинхронні запити до серверу за завчасно заданими шляхами, для обміну даних. Синхронізація даних повністю залежить від серверного застосунку.
Авторизація виконується за протоколом Auth0, за допомогою токена JWT. Застосунок підтримує українську та англійську мови інтерфейсу.
Результатом прийнятих архітектурних рішень стала UML діаграма  компонент, що демонструє складну структуру системи (див. додаток А.2).


3.2 Опис використаних технологій


Розробка застосунку виконувалася за допомогою мови програмування Kotlin, зокрема, фреймворка Android Jetpack Compose.
Для авторизації використовувалася бібліотека Google Identity SDK. 
Для демонстрації структури використання пакетів усередині системи була розроблена UML діаграма пакетів (див. додаток А.3).


3.3 Опис результатів розробки мобільного застосунку


Результатом роботи став мобільний застосунок.
Під час запуску додатку, спершу на екран виводиться пропозиція авторизуватися за допомогою Google.
Після авторизації, користувач потрапляє на головну сторінку застосунку. У інтерфейсі для керівника складу застосунок має чотири вкладинки: «Сховище», «Машини» та «Завдання» та «Працівники». За замовчування, користувач автоматично потрапляє на сторінку «Сховище».
Кожна сторінка відповідає за свою структуру даних, та всі вкладені в неї, так, наприклад, у розділі «Сховища» можна керувати с місцями зберігання, товарами; у розділі «Машини»: машинами, місцями зберігання, товарами, переміщеннями; у розділі «Завдання»: додавати завдання, у розділі «Працівники»: додавати робочий день працівникам.
У верхній панелі, що доступна у всіх частинах застосунку, присутня клавіши для перемикання мови застосунку.
Після введення даних у форми, що доступні у застосунку, дані збережуться лише в разі підтвердження. Це зроблено для захисту користувача від ненавмисного паплюження даних. 
Валідація даних відбувається на рівні компонентів Jetpack Compose nа на серверній частині застосунку.
Для демонстрації структури даних проекту була розроблена ER-модель даних (Entity–Relationship Model) мобільної платформи (див. додаток А.1).


3.4 Опис результатів тестування мобільного застосунку


Для перевірки правильності роботи системи було проведено тестування. Тестування виконувалося вручну, за допомогою спеціального програмного забезпечення, а також з використання програмних підходів. У ході тестування було використано функціональність IDE Android Studio.


ВИСНОВКИ


Результатом даної лабораторної роботи став мобільний застосунок.
Застосунок є частиною програмної системи і взаємодіє з нею. Програмне забезпечення реалізовує розширену функціональність та забезпечує взаємодію з іншими частинами системи.
