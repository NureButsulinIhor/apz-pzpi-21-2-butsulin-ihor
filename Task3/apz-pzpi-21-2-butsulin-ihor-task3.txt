1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ СИСТЕМИ


Перед розробкою частини платформи для вбудованих систем необхідно провести концептуальне моделювання програмного продукту. 
Відповідно, контролеру необхідно мати можливість читати дані з тензодатчика, вивести фактичну та еталонну вагу на екран, підсвітити світлодіод з заданою яскравістю за допомогою ШИМ, передати фактичну вагу на сервер, та отримати еталонну вагу предмету.
У відповідності до вищезазначеного, була розроблена UML діаграма прецедентів (рис. 1.1).


2 ОПИС РОЗРОБКИ ЗАСТОСУНКУ ДЛЯ ВБУДОВАНИХ СИСТЕМ 
2.1 Обґрунтування архітектурних рішень проекту


Під час розробки було визначено, що архітектурною основою застосунку для вбудованих систем стане монолітна архітектура. Таке рішення дозволило значно покращити продуктивність продукту та розробку проекту. 
Визначено, що робота з пристроями та комунікація з сервером будуть виконуватися послідовно.
Налаштування та конфігурація будуть зберігатися у окремому заголовкому файлі та підвантажуватися в момент компіляції застосунку.
Було вирішено, що комунікація між серверною частиною проекту та IoT-Device буде виконуватися за принципом long polling, що полягає у виконанні запитів контролером кожен чітко окреслений проміжок часу для синхронізації інформації. Такий підхід спрощує реалізацію комунікації між контролером та серверною частиною проекту та дозволяє не підтримувати постійний зв’язок між розумним пристроєм та сервером.
Під час обміну даних контролер має відправляти на сервер свій токен з конфігурації та фактичну вагу предмета. У відповідь, контролер від сервісу отримує еталонну вагу предмета.
Також, для отримання і виведення даних, буде використаний тензодатчик, екран, та світлодіод.
Результатом прийнятих архітектурних рішень стала UML діаграма  діяльності, що демонструє складну структуру системи (див. додаток А.2).


3.2 Опис використаних технологій


Прототипування системи виконувалося з розрахунку, що система має запускатися та функціонувати на ESP32 з використанням Arduino SDK. Під час розробки вбудованої частини системи був використаний інструмент Wokwi у якості IDE для зазначеної платформи. Також, використовувалися деякі зовнішні технології.
Зокрема, у якості тензодатчика було використано HX711 у комплектації, що підтримує вагу до 50 кілограм.
У якості екрану, було використано LCD екран LiquidCrystal комплектації 16х2 (16 символів у ряді, 2 рядки).
Для обміну даними с сервером було використано HTTPClient стандартної бібліотеки ESP32 та зовнішній пакет ArduinoJson для кодування й декодування тіла запитів.
Для роботи з ШИМ, Wi-Fi та часовими параметрами використовувалися засоби стандартної бібліотеки ESP32.
Для демонстрації структури використання пакетів усередині системи була розроблена UML діаграма пакетів (див. додаток А.3).


3.3 Опис результатів розробки частини проекту для вбудованих систем


Результатом роботи став застосунок для вбудованих систем, що реалізований для ESP32.
Під час запуску додатку, спершу відбувається його ініціалізація та підготовка (див. додаток Б.1). Під час цього етапу виконується ініціалізація LCD-екрану, Wi-Fi, тензодатчика, світлодіода, системи роботи з часом.
Після ініціалізації, система циклічно виконує головну функцію програми кожні 2 секунди.
У головній частині програми, виконується зважування предмету за допомогою тензодатчика. Після цього, для полегшення налагодження додатку, система виводить до консолі порту налагоджування фактичну масу. 
Далі, застосунок робить запит до сервера, в якому за допомогою ArduinoJSON кодує результат зважування та час зважування. У результаті запиту, програма отримує еталонний показник ваги, з яким буде виконуватися порівняння. 
Після цього виконується розрахунок різниці за модулем між фактичною та еталонною вагою та переведення її у мені від 0 до 255. Даний показник буде названий яскравістю. 
Далі, за допомогою ШИМ, застосунок задає світлодіоду отриману яскравість, відповідно, чим більшою є різниця між фактичним та еталонним показниками, тип яскравіше світиться світлодіод.
Після цього, застосунок передає фактичну та еталону вагу на екран, для її відображення.
Для демонстрації структури проекту була розроблена UML діаграма взаємодії (див. додаток А.1).


3.4 Опис результатів тестування частини проекту для вбудованих систем


Для перевірки правильності роботи системи було проведено тестування. Тестування виконувалося вручну, за допомогою спеціального програмного забезпечення, а також з використання програмних підходів. У ході тестування було використано функціональність Wokwi як емулятора ESP32 та датчиків.
Налаштування Wi-Fi задані таким чином, як цього вимагає Wokwi для емуляції роботи відповідного модуля.
Фактична вага передається через інтерфейс емулятора. Важливо зазначити, що під час ініціалізації вона має бути виставлена 0 для правильної роботи тензодатчика в подальшому.
Робота світлодіода, екрана та консолі налагоджування відображені у графічному інтерфейсі емулятора.


ВИСНОВКИ


Результатом даної лабораторної роботи стала розробка програмного забезпечення для вбудованих систем.
Пристрій є частиною програмної системи і взаємодіє з нею. Програмне забезпечення реалізовує розширену функціональність,  що відповідає концепції вбудованих систем та забезпечує взаємодію з іншими частинами системи.
