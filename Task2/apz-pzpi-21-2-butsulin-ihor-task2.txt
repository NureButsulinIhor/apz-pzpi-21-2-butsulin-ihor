1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Визначено, що система буде мати п’ять основних компонентів: серверна частина, клієнтський веб-застосунок, мобільний застосунок, IoT-застосунок та відокремлена база даних, що знаходиться на хмарі з метою захисту даних користувачів. Також, система додатково звертається до зовнішніх API, зокрема до Google Identity API, з метою аутентифікації та авторизації, оскільки це є більш безпечним і надійним рішенням, аніж використання аутентифікації за допомогою пароля. Аутентифікація і авторизація будуть засновані на протоколі Auth0, що використовує принцип зберігання інформації про користувача у форматі JWT.
Було визначено, що ролями в системі слугуватимуть адміністратор системи, керівник складу та працівник складу.
Адміністратор системи може додавати та видаляти з системи користувачів (керівників складів та працівників), додавати та редагувати дані про посилки; додавати, видаляти та редагувати дані про склади, машини, місця зберігання, підключати та видаляти IoT-пристрій.
Керівник складу може створювати, редагувати та видаляти завдання для працівників з переміщення посилок, вносити інформацію про прибуття та вибуття машин, отримувати інформацію про поточний стан завдань, машин та складу, додати робочий час працівників.
Працівник може отримати дані про завдання, які він має виконати, та відмітити їх статус (виконано чи не виконано).
Система покриває основні функції та процеси, необхідні для управління складом, включаючи прийом та відвантаження товарів, зберігання товарів, переміщення товарів та відстеження товарів.
 
2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Постає завдання з проектування взаємодії частин системи.
Клієнтський веб-застосунок буде виконуватися у браузері, виконуючи запити до сервера, де розміщений код та розмітка веб-застосунку. Зв’язок з backend частиною програмного продукту буде виконуватися за допомогою асинхронних HTTPS запитів, що будуть непомітні для користувача. Також, за допомогою перенаправлень, будуть викликатися методи Google Identity API, у разі необхідності.
Мобільний застосунок під час виконання нативно на цільовій платформі буде виконувати асинхронні HTTPS запити, що будуть непомітні для користувача, для зв’язку з backend.
IoT пристрій буде виконувати регулярні HTTPS запити за приципом Long Polling для сихронізації даних з backend.
Backend буде мати ексклюзивний зв’язок з базою даних, що буде підтримуватися за рахунок постійних HTTPS з’єднань.
На основі отриманого створили діаграму розгортання (рис. А.2).
 
3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Архітектура серверної частини застосунку побудована за принципом N-рівневої архітектури. Основні рівні представлені: рівнем представлення, рівнем бізнес-логіки, рівнем доступу до даних. Присутні також два додаткових частини: службові компоненти та моделі.
На рівні представлення серверна частина програмного продукту отримує зовнішні запити до API, направляє їх у бізнес-логіку, і після отримання результату повертає його користувачу. У якості сервера та роутера використовується бібліотека Chi для мови програмування Go.
На рівні бізнес-логіки виконуються основні операції над даними. У разі потреби в отриманні чи збереженні даних, запит відправляється до рівня доступу до даних.
Рівень доступу до даних взаємодіє з базою даних, отримує чи зберігає інформацію. Рівень доступу до даних побудований за патерном «Репозиторій», що допомагає абстрагувати його від бізнес-логіки. Для взаємодії з БД використовується ORM GORM для мови програмування Go.
Службовими компонентами у застосунку є логер та конфигуратор. Вони засновані на інструментах стандартної бібліотеки мови програмування Go.
Моделі несуть в собі структуру даних, що використовується в усіх рівнях абстракції.
 
4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Система покриває основні функції та процеси, необхідні для управління складом, включаючи прийом та відвантаження товарів, зберігання товарів, переміщення товарів та відстеження товарів.
Адміністратор системи може додавати та видаляти з системи користувачів (керівників складів та працівників), додавати та редагувати дані про посилки; додавати, видаляти та редагувати дані про склади, машини, місця зберігання, підключати та видаляти IoT-пристрій.
Керівник складу може створювати, редагувати та видаляти завдання для працівників з переміщення посилок, вносити інформацію про прибуття та вибуття машин, отримувати інформацію про поточний стан завдань, машин та складу, додати робочий час працівників.
Працівник може отримати дані про завдання, які він має виконати, та відмітити їх статус (виконано чи не виконано).
IoT пристрій отримує інформацію про цільове навантаження, яке має теоретично бути на під’єднаному місці зберігання, та передає на сервер дані вимірів з позначенням часу виміру.
На основі отриманого створили діаграму прецедентів (рис. А.1).
 
5 ПОБУДОВА ER-ДІАГРАМИ

Першочерговою задачею при розробці системи постає розробка системи типів для продукту, оскільки першочерговим завданням системи є цілісне зберігання, оновлення та видача інформації за потребою. Отож, так як для реалізації серверної частини продукту використовується мова програмування Go, ORM GORM та СУБД PostgreSQL, то сутності будуть представлені у вигляді структур Go.
Першою описуваною структурою, є користувач системи. При створенні сутності було взято до уваги, що авторизація системи буде відбуватися за технологією Google Identity API, тому структуру їх даних було взято за основу. Структура «Користувач» зберігає інформацію про пошту, яка стане первинним ключем, ім’я та аватар користувача.
Додано тип «Тип користувача» на основі базового типу рядок. Додано декілька констант, що відображають можливі значення даного типу. 
Додано структуру «Посилка». Вона зберігає дані про ідентифікатор, назву, опис, та пов’язана з місцем розміщення зв’язком «один-до-одного» (див. додаток Б.6).
Додано структуру «Пристрій». Вона зберігає дані про ідентифікатор та пов’язана з місцем розміщення зв’язком «один-до-одного».
Додано структуру «Результат вимірювання». Вона зберігає дані про ідентифікатор, вагу під час виміру, час виміру та пов’язана з місцем розміщення зв’язком «один-до-багатьох».
Додано структуру «Місце розміщення». Вона зберігає дані про ідентифікатор та пов’язана з сховищем зв’язком «один-до-багатьох».
Додано структуру «Сховище». Вона зберігає дані про ідентифікатор, тип сховища та пов’язана з складом або машиною зв’язком «один-до-одного».
Додано тип «Тип сховища» на основі базового типу рядок. Додано декілька констант, що відображають можливі значення даного типу. 
Додано структуру «Склад». Вона зберігає дані про ідентифікатор та пов’язана з менеджером зв’язком «один до одного».
Додано структуру «Менеджер». Вона зберігає дані про ідентифікатор та пов’язана зі складом та користувачем зв’язком «один до одного».
Додано структуру «Працівник». Вона зберігає дані про ідентифікатор та пов’язано з розкладом та складом зв’язком «один до багатьох».
Додано структуру «Розклад». Вона зберігає дані про ідентифікатор, час початку роботи та кінця роботи і пов’язана з працівником зв’язком «один до багатьох».
Додано структуру «Машина», що зберігає інформацію про ідентифікатор, та пов’язана зі складом та користувачем зв’язком «один до одного».
Додано структуру «Переміщення», що зберігає інформацію про ідентифікатор, початок та кінець часу розміщення на складі, та пов’язана зі складом зв’язком «один до одного» та з машиною зв’язком «один до багатьох».
Додано структуру «Завдання», що зберігає інформацію про ідентифікатор та статус завдання, та пов’язана з місцем розміщення зв’язком «один до одного» та з працівником зв’язком «один до багатьох».
На основі отриманих структур створили ER-модель даних (рис. 5.1).
 
6 СПЕЦИФІКАЦІЯ REST

Після розробки серверної частини програмного продукту буде отримана специфікація REST.
POST /login: Endpoint for user login
POST /register/device: Endpoint for registering a new device
DELETE /register/device: Endpoint for deleting a registered device
POST /register/manager: Endpoint for registering a new manager
GET /register/manager/all: Endpoint for getting all registered managers
POST /register/worker: Endpoint for registering a new worker
DELETE /register/worker: Endpoint for deleting a registered worker
POST /admin/car: Endpoint for adding a new car
DELETE /admin/car: Endpoint for deleting a car
GET /admin/car: Endpoint for getting a car
POST /admin/item: Endpoint for adding a new item
PUT /admin/item: Endpoint for updating an item
POST /admin/warehouse: Endpoint for adding a new warehouse
DELETE /admin/warehouse: Endpoint for deleting a warehouse
GET /admin/warehouse: Endpoint for getting a warehouse
POST /admin/slot: Endpoint for adding a new slot
DELETE /admin/slot: Endpoint for deleting a slot
GET /admin/slot: Endpoint for getting a slot
PUT /admin/slot: Endpoint for updating a slot
GET /manager/car/all: Endpoint for getting all cars
POST /manager/task: Endpoint for adding a new task
GET /manager/task: Endpoint for getting a task
GET /manager/task/all: Endpoint for getting all tasks
DELETE /manager/task: Endpoint for deleting a task
POST /manager/timetable: Endpoint for adding to timetable
POST /manager/transfer: Endpoint for adding a new transfer
GET /manager/transfer/all: Endpoint for getting all transfers
POST /manager/connect: Endpoint for connecting a device
POST /device/polling: Endpoint for device polling
GET /worker/task: Endpoint for getting tasks
POST /worker/task: Endpoint for setting a task as done
 
7 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Після проектування архітектури серверної частини програмного продукту була отримана структура пакетів проекту.
Головним пакетом програми у мові програмування Go є пакет main. У ньому відбувається імпорт, ініціалізація та виконання всіх інших пакетів. Також саме у ньому визначено REST специфікацію проекту.
Рівень представлення представлений пакетом handlers. У ньому знаходяться всі інші підпакети, що відповідають за отримання запитів та надсилання відповіді.
Рівень бізнес-логіки: пакетом services. У ньому знаходяться всі інші підпакети, що відповідають за виконання дій, необхідних користувачу.
Рівень доступу до даний: пакетом storage, де знаходиться весь код роботи з базою даних.
Службові компоненти: пакетом internal. В ньому визначений логер та конфігуратор проекту.
Моделі: пакет types.
На основі отриманих структур створили діаграму пакетів (рис. А.3).
 
ВИСНОВКИ

Результатом даної лабораторної роботи стала розробка серверної частини для програмної системи для управління складом. Наведено опис прийнятих інженерних рішень. Представлено загальну архітектуру системи, показано будову серверних компонентів та структури бази даних.
 
ДОДАТОК А
Специфікація REST

POST /login: Endpoint for user login
POST /register/device: Endpoint for registering a new device
DELETE /register/device: Endpoint for deleting a registered device
POST /register/manager: Endpoint for registering a new manager
GET /register/manager/all: Endpoint for getting all registered managers
POST /register/worker: Endpoint for registering a new worker
DELETE /register/worker: Endpoint for deleting a registered worker
POST /admin/car: Endpoint for adding a new car
DELETE /admin/car: Endpoint for deleting a car
GET /admin/car: Endpoint for getting a car
POST /admin/item: Endpoint for adding a new item
PUT /admin/item: Endpoint for updating an item
POST /admin/warehouse: Endpoint for adding a new warehouse
DELETE /admin/warehouse: Endpoint for deleting a warehouse
GET /admin/warehouse: Endpoint for getting a warehouse
POST /admin/slot: Endpoint for adding a new slot
DELETE /admin/slot: Endpoint for deleting a slot
GET /admin/slot: Endpoint for getting a slot
PUT /admin/slot: Endpoint for updating a slot
GET /manager/car/all: Endpoint for getting all cars
POST /manager/task: Endpoint for adding a new task
GET /manager/task: Endpoint for getting a task
GET /manager/task/all: Endpoint for getting all tasks
DELETE /manager/task: Endpoint for deleting a task
POST /manager/timetable: Endpoint for adding to timetable
POST /manager/transfer: Endpoint for adding a new transfer
GET /manager/transfer/all: Endpoint for getting all transfers
POST /manager/connect: Endpoint for connecting a device
POST /device/polling: Endpoint for device polling
GET /worker/task: Endpoint for getting tasks
POST /worker/task: Endpoint for setting a task as done
