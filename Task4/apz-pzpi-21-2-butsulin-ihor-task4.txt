1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ СИСТЕМИ


Перед розробкою частини платформи для вбудованих систем необхідно провести концептуальне моделювання програмного продукту. 
Відповідно, адміністратор системи повинен мати можливість додавати до системи нові сховища, машини, видаляти їх, додавати, видаляти, редагувати місця зберігання, додавати та редагувати товари, додавати та видаляти працівників сховищ, додавати менеджерів складу. Крім того, адміністратор повинен мати можливість переглядати зазначені структури.
У відповідності до вищезазначеного, була розроблена UML діаграма прецедентів (рис. 1.1).


2 ОПИС РОЗРОБКИ КЛІЄНТСЬКОГО ВЕБ-ЗАСТОСУНКУ
2.1 Обґрунтування архітектурних рішень проекту


Під час розробки було визначено, що архітектурною основою клієнтського застосунку стане змішана архітектура на основі компонентно-орієнтованої архітектури. Таке рішення дозволило значно покращити продуктивність продукту та розробку проекту. 
Кожна незалежна частина системи написана у вигляді компонента – напівзалежних частин, двобічна комунікація яких обмежена. Це дозволяє розділити програму на логічні частини і підвищує якість коду.
Налаштування та конфігурація будуть зберігатися у окремому файлі та підвантажуватися в момент збірки застосунку.
Обмін даних між серверною та клієнтською частиною програми виконується за принципом REST API, тобто клієнтський застосунок виконує асинхронні запити до серверу за завчасно заданими шляхами, для обміну даних. Синхронізація даних повністю залежить від серверного застосунку.
Авторизація виконується за протоколом Auth0, за допомогою токена JWT. Застосунок підтримує українську та англійську мови інтерфейса.
Результатом прийнятих архітектурних рішень стала UML діаграма  компонент, що демонструє складну структуру системи (див. додаток А.2).


3.2 Опис використаних технологій


Розробка застосунку виконувалася за допомогою мови програмування TypeScript та бібліотеки веб-інтерфесів React. У якості стилізованої компонентної бібліотеки використовувалася бібліотека MUI. 
Для авторизації використовувалася бібліотека Google Identity SDK. У якості середовища виконання використовувався NodeJS.
У якості інструменту інтернаціоналізації було використано бібліотеку react-i18next.
Для демонстрації структури використання пакетів усередині системи була розроблена UML діаграма пакетів (див. додаток А.3).


3.3 Опис результатів розробки клієнтської частини проекту


Результатом роботи став клієнтський веб-застосунок.
Під час запуску додатку, спершу на екран виводиться пропозиція авторизуватися за допомогою Google.
Після авторизації, користувач потрапляє на головну сторінку застосунку. Застосунок має три вкладки: «Сховища», «Машини» та «Менеджери». За замовчування, користувач автоматично потрапляє на сторінку «Сховища».
Кожна сторінка відповідає за свою структуру даних, та всі вкладені в неї, так, наприклад, у розділі «Сховища» можна керувати сховищами, працівниками складу, місцями зберігання, товарами; у розділі «Машини»: машинами, місцями зберігання, товарами; у розділі «Менеджери»: вільними менеджерами.
У верхній панелі, що доступна у всіх частинах застосунку, присутні клавіши «UA» та «EN» для перемикання мови застосунку.
Після введення даних у форми, що доступні у застосунку, дані збережуться лише в разі підтвердження. Це зроблено для захисту користувача від ненавмисного паплюження даних. 
Валідація даних відбувається на рівні браузера стандартними інструментами HTML5.
Для демонстрації структури проекту була розроблена UML діаграма діяльності (див. додаток А.1).


3.4 Опис результатів тестування частини проекту для вбудованих систем


Для перевірки правильності роботи системи було проведено тестування. Тестування виконувалося вручну, за допомогою спеціального програмного забезпечення, а також з використання програмних підходів. У ході тестування було використано функціональність браузерів Google Chrome, Mozilla Firefox та IDE Jetbrains Webstorm.


ВИСНОВКИ


Результатом даної лабораторної роботи стала розробка клієнтської частини програмного забезпечення.
Застосунок є частиною програмної системи і взаємодіє з нею. Програмне забезпечення реалізовує розширену функціональність та забезпечує взаємодію з іншими частинами системи.